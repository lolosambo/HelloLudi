/**
 * Protection contre l'affichage des boutons d'√©dition hors √©diteur
 * Ce script s'assure que les boutons d'√©dition n'apparaissent que dans l'√©diteur
 */

(function() {
    'use strict';

    // Fonction de nettoyage des boutons d'√©dition hors √©diteur
    function cleanupEditButtonsOutsideEditor() {
        console.log('üõ°Ô∏è V√©rification des boutons d\'√©dition hors √©diteur...');

        // V√©rifier d'abord si on est sur une page avec √©diteur
        const hasEditor = document.getElementById('richEditorContainer') || 
                         document.querySelector('.rich-editor-container') ||
                         document.querySelector('.editor-content[contenteditable="true"]') ||
                         window.richEditor;

        if (hasEditor) {
            console.log('‚úÖ √âditeur d√©tect√© - Protection all√©g√©e');
            // Sur les pages d'√©dition, on ne supprime que les boutons vraiment hors √©diteur
            const unauthorizedButtons = document.querySelectorAll('.post-content .table-edit-btn');
            if (unauthorizedButtons.length > 0) {
                console.log(`üßπ Suppression de ${unauthorizedButtons.length} bouton(s) hors contexte d'√©dition`);
                unauthorizedButtons.forEach(button => button.remove());
            }
            return;
        }

        // Sur les pages sans √©diteur, supprimer tous les boutons
        const allEditButtons = document.querySelectorAll('.table-edit-btn');
        
        if (allEditButtons.length === 0) {
            console.log('‚úÖ Aucun bouton d\'√©dition trouv√©');
            return;
        }

        console.log(`üîç ${allEditButtons.length} bouton(s) d'√©dition trouv√©(s) sur page sans √©diteur`);
        
        allEditButtons.forEach((button, index) => {
            console.log(`üóëÔ∏è Suppression du bouton ${index + 1} (page sans √©diteur)`);
            button.remove();
        });

        console.log('‚úÖ Nettoyage termin√©');
    }

    // Ex√©cuter le nettoyage apr√®s chargement de la page
    document.addEventListener('DOMContentLoaded', function() {
        // Attendre que tout soit charg√©
        setTimeout(() => {
            cleanupEditButtonsOutsideEditor();
        }, 1000);
    });

    // Nettoyage p√©riodique l√©ger
    setInterval(() => {
        const unauthorizedButtons = document.querySelectorAll('.post-content .table-edit-btn, .post-detail-container .table-edit-btn');
        if (unauthorizedButtons.length > 0) {
            console.log(`üßπ Nettoyage p√©riodique : ${unauthorizedButtons.length} bouton(s) non autoris√©(s) supprim√©(s)`);
            unauthorizedButtons.forEach(button => button.remove());
        }
    }, 5000);

    // Observer les changements DOM pour r√©agir rapidement
    const observer = new MutationObserver((mutations) => {
        // V√©rifier d'abord si on a un √©diteur sur la page
        const hasEditor = document.getElementById('richEditorContainer') || 
                         document.querySelector('.rich-editor-container') ||
                         window.richEditor;
        
        if (hasEditor) {
            // Sur les pages avec √©diteur, surveillance all√©g√©e
            return;
        }

        mutations.forEach((mutation) => {
            if (mutation.type === 'childList') {
                mutation.addedNodes.forEach((node) => {
                    if (node.nodeType === Node.ELEMENT_NODE) {
                        // V√©rifier s'il y a des boutons d'√©dition ajout√©s
                        const newButtons = node.classList && node.classList.contains('table-edit-btn') 
                            ? [node] 
                            : node.querySelectorAll ? node.querySelectorAll('.table-edit-btn') : [];

                        newButtons.forEach(button => {
                            // Sur page sans √©diteur, supprimer tous les nouveaux boutons
                            console.log('üö´ Bouton d\'√©dition non autoris√© d√©tect√© et supprim√© (page sans √©diteur)');
                            button.remove();
                        });
                    }
                });
            }
        });
    });

    // Observer tout le document mais avec une configuration l√©g√®re
    observer.observe(document.body, {
        childList: true,
        subtree: true
    });

    // Rendre la fonction disponible globalement pour les tests
    window.cleanupEditButtonsOutsideEditor = cleanupEditButtonsOutsideEditor;

    console.log('üõ°Ô∏è Protection des boutons d\'√©dition activ√©e');

})();
